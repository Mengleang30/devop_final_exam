pipeline {
    agent any

    environment {
        CC_EMAIL = 'srengty@gmail.com'
        ANSIBLE_PLAYBOOK = './web-deploy.yml'   // Adjust if needed
    }

    options {
        // Poll SCM every 5 minutes
        pollSCM('H/5 * * * *')
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '50'))
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh 'composer install --no-interaction --prefer-dist --optimize-autoloader'
                sh 'npm install'
                sh 'npm run build'
            }
        }

        stage('Test') {
            steps {
                sh 'DB_CONNECTION=sqlite DB_DATABASE=database/testing.sqlite ./vendor/bin/phpunit'
            }
        }

        stage('Deploy') {
            steps {
                sh "ansible-playbook -i ${env.INVENTORY} ${env.ANSIBLE_PLAYBOOK}"
            }
        }
    }

    post {
        success {
            echo 'Build, test, and deploy succeeded.'
        }
        failure {
            script {
                def committerEmail = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()
                def recipients = "${env.CC_EMAIL},${committerEmail}"

                emailext (
                    to: recipients,
                    subject: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                        Build failed for <b>${env.JOB_NAME}</b> build #${env.BUILD_NUMBER}.<br>
                        Check console output at: ${env.BUILD_URL}console
                    """,
                    mimeType: 'text/html'
                )
            }
        }
    }
}
